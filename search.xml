<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shell脚本编程</title>
    <url>/2020/04/20/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="实验-shell-脚本的编写，主要掌握测试条件、位置变量和函数的使用。"><a href="#实验-shell-脚本的编写，主要掌握测试条件、位置变量和函数的使用。" class="headerlink" title="实验 shell 脚本的编写，主要掌握测试条件、位置变量和函数的使用。"></a>实验 shell 脚本的编写，主要掌握测试条件、位置变量和函数的使用。</h1><a id="more"></a>
<hr>
<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了, 猜小了或猜大了,直至用户猜对脚本结束。(提示:RANDOM 为系统自带的系统变量, 值为 0‐32767 的随机数，使用取余算法将随机数变为 1‐100 的随机数) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">## filename: p1.sh</span><br><span class="line"></span><br><span class="line">num&#x3D;$[$RANDOM%100]</span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    read -p &quot;请输入一个1-100之内的数:&quot; n</span><br><span class="line">    if (($n &#x3D;&#x3D; $num)) </span><br><span class="line">        then echo &quot;恭喜您猜对了!&quot; </span><br><span class="line">        break</span><br><span class="line">    elif (($n&gt;$num))</span><br><span class="line">        then echo &quot;提示：您猜大了&quot;</span><br><span class="line">    else echo &quot;提示：您猜小了&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>效果图如下</strong></p>
<img src="/2020/04/20/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/1.png" class="" title="效果图">

<hr>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>使用 shell 脚本编写一函数 add 求两个数的和，要求这两个数用位置参数传入，最后输出结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">declare -i sum&#x3D;0</span><br><span class="line">sum&#x3D;$(($1+$2))</span><br><span class="line">echo -e &quot;$1+$2&#x3D;$sum&quot;</span><br></pre></td></tr></table></figure>

<p><strong>效果图如下</strong></p>
<img src="/2020/04/20/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/2.png" class="" title="效果图">

<hr>
<h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>编写一个 shell 脚本，实现如下功能:把第二个位置参数及其以后的各个参数指定的文件复制到第一个位置参数指定的目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#把第一个位置参数地址所指向的文件夹作为复制的目标地址</span><br><span class="line">path&#x3D;&quot;.&quot;</span><br><span class="line">for x in $@</span><br><span class="line">do</span><br><span class="line">path&#x3D;$x</span><br><span class="line">break</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;Copying...&quot;</span><br><span class="line">shift</span><br><span class="line"></span><br><span class="line">#从第二个位置参数开始复制</span><br><span class="line">for x in $@</span><br><span class="line">do</span><br><span class="line">cp $x $path</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;done&quot;</span><br></pre></td></tr></table></figure>

<p><strong>效果图如下</strong></p>
<img src="/2020/04/20/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/3.png" class="" title="效果图">

<hr>
<h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><p>编写脚本模拟实现交互式文件目录操作，实现命令包括:dir-列出当前目录下的文件和子目录;cd-切换目录;wcd-显示当前工作目录;create-创建一个文件;delete-删除一个文件;rename-重命名文件;newdir-创建目录;deldir-删除目录;exit-退出系统。(提示:可使用 select 命令实现交互操作，题目中要求实现的命令可用 Linux shell 中相关的命令模拟实现，如 dir 可用使用 ls 命令实现)。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo &quot;请选择你要执行的命令&quot;</span><br><span class="line">    select s in &quot;dir&quot; &quot;cd&quot; wcd create delete rename newdir deldir &quot;exit&quot;</span><br><span class="line">    do</span><br><span class="line">        case $REPLY in</span><br><span class="line"></span><br><span class="line">            1|[dD]ir) </span><br><span class="line">            dir  </span><br><span class="line">	    break  ;;</span><br><span class="line"></span><br><span class="line">	    2|[cC]d)</span><br><span class="line">	    read -p &quot;请输入你要跳转的路径&quot; path</span><br><span class="line">	    cd $path</span><br><span class="line">            echo -n &quot;您已成功跳转到&quot;</span><br><span class="line">            pwd  </span><br><span class="line">	    break  ;;</span><br><span class="line"></span><br><span class="line">            3|[wW]cd)</span><br><span class="line">	    pwd  </span><br><span class="line">	    break  ;;</span><br><span class="line"></span><br><span class="line">	    4|[cC]reate)</span><br><span class="line">	    read -p &quot;请输入你要创建的文件名&quot; filename</span><br><span class="line">            touch $filename </span><br><span class="line">	    echo &quot;$filename已创建成功&quot;  </span><br><span class="line">	    break ;;</span><br><span class="line"></span><br><span class="line">	    5|[dD]elete)</span><br><span class="line">	    read -p &quot;请输入你要删除的文件名&quot; filename</span><br><span class="line">	    rm -f $filename</span><br><span class="line">	    echo &quot;$filename已删除成功&quot;  </span><br><span class="line">	    break ;;</span><br><span class="line">	    </span><br><span class="line">	    6|[rR]ename)</span><br><span class="line">            read -p &quot;请输入你要修改掉的文件名和改成的文件名&quot; n1 n2</span><br><span class="line">            mv $n1 $n2</span><br><span class="line">	    echo &quot;修改成功&quot;  </span><br><span class="line">	    break  ;;</span><br><span class="line"></span><br><span class="line">	    7|[nN]ewdir)</span><br><span class="line">	    read -p &quot;请输入你要创建的目录名&quot; dirname</span><br><span class="line">            mkdir $dirname </span><br><span class="line">	    echo &quot;目录创建成功&quot;  </span><br><span class="line">	    break  ;;</span><br><span class="line">	    </span><br><span class="line">	    8|[dD]eldir)</span><br><span class="line">	    read -p &quot;请输入你要删除的目录名&quot; dirname</span><br><span class="line">	    rm -rf $dirname</span><br><span class="line">	    echo &quot;目录删除成功&quot;  </span><br><span class="line">	    break  ;;</span><br><span class="line"></span><br><span class="line">	    9|[eE]xit)</span><br><span class="line">	    exit ;;</span><br><span class="line">	    </span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>指针初览</title>
    <url>/2020/04/22/%E6%8C%87%E9%92%88%E5%88%9D%E8%A7%88/</url>
    <content><![CDATA[<h1 id="变量和内存"><a href="#变量和内存" class="headerlink" title="变量和内存"></a>变量和内存</h1><ol>
<li>内存用于存储数据，最小的单元是字节，每个单元都有一个地址编号，从0X0000000~0XFFFFFFFF</li>
<li>变量有大小，指的是在内存占了几个字节。</li>
<li>变量有地址，是变量在内存的位置，用&amp;号可以取得地址。</li>
<li>变量赋值，就是向内存写入数据。读变量的值，就是从内存读取数据。</li>
<li>每个变量都有自己的内存地址，绝不会有两个变量的地址相同。</li>
<li>程序每次运行时，变量的地址是不一样的，无法预测与不需要预测</li>
</ol>
<h1 id="如何表示地址"><a href="#如何表示地址" class="headerlink" title="如何表示地址"></a>如何表示地址</h1><p>地址是整数，是否可以用 int ? （理论上可以。。。）<br>但是为了强调它是个内存地址，提出一些新的类型。。。</p>
<p>char*  :  表示一个char型变量的地址<br>short* :  表示一个short型变量的地址<br>int*   :  表示一个int型变量的地址<br>float* :  表示一个float型变量的地址<br>double<em>:  表示一个double型变量的地址<br>unsigned char</em>: 表示一个unsigned char型变量的地址<br>…<br>XXX*   : 表示XXX型变量的地址</p>
<p>以下以int型变量为例：<br>int a = 10;<br>int <em>pa = &a;<br>定义一个变量pa，类型为int</em>，初始值为&amp;a。</p>
<p>有两种叫法：<br>pa指向了一个int型变量<br>pa所在的内存是一个int型整数<br>我们称int*为指针类型，pa为指针类型的变量(简称指针)</p>
<h1 id="关于指针"><a href="#关于指针" class="headerlink" title="关于指针"></a>关于指针</h1><ol>
<li>指针（Pointer) 类型</li>
<li>指针变量————具有指针类型的变量<ul>
<li>int *pa</li>
<li>保存32位地址值————sizeof(pa)是4个字节</li>
</ul>
</li>
<li>变量的地址是一个常量，不能改变</li>
<li>变量的指针是一个变量，可以被改变，改变指针变量的值，就相当于改变指针变量的指向</li>
<li>指针变量在使用前必须初始化（未初始化的指针变量是一个随机的值，对它进行写操作可能会对系统造成潜在的威胁）。若你不知道把它指向哪里的话，那就指向NULL（在stdio.h中定义为0）</li>
</ol>
<h2 id="NULL是什么"><a href="#NULL是什么" class="headerlink" title="NULL是什么"></a>NULL是什么</h2><ul>
<li>空指针————值为NULL的指针，即无效指针</li>
<li>问题：p = 0 和 p = NULL 有什么区别<ul>
<li>p = NULL 可以明确地说p是一个指针变量，而不是一个数值型变量</li>
</ul>
</li>
<li>问题： 空指针就是指向地址为0的存储单元的指针吗<ul>
<li>答案：不一定<br>并非所有编译器都使用0地址<br>某些编译器为空指针使用不存在的内存地址</li>
</ul>
</li>
</ul>
<h2 id="指针变量的解引用"><a href="#指针变量的解引用" class="headerlink" title="指针变量的解引用"></a>指针变量的解引用</h2><ol>
<li>此<label style="color:red">*</label>非彼<label style="color:blue">*</label></li>
</ol>
<ul>
<li>在 int <label style="color:blue">*</label>pa 中，<label style="color:blue">*</label>作为指针类型的说明符，用于定义指针变量</li>
<li>在 <label style="color:red">*</label>pa = 1 中，<label style="color:red">*</label>作为寻址运算符，用于访问指针变量pa所指向的那个变量的值</li>
</ul>
<ol start="2">
<li>只要pa指向a,*pa就是a的别名</li>
</ol>
<h2 id="为什么要用指针变量做函数参数"><a href="#为什么要用指针变量做函数参数" class="headerlink" title="为什么要用指针变量做函数参数"></a>为什么要用指针变量做函数参数</h2><ul>
<li><label style="color:red">基本类型</label>的变量作函数参数： <ul>
<li>实参变量的值→形参（parameter）</li>
<li>在被调函数中不能改变实参的值</li>
</ul>
</li>
<li><label style="color:red">指针类型</label>的变量作函数参数： <ul>
<li>实参变量的地址→指针形参(pointer parameter)</li>
<li>在被调函数中可以改变实参的值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>指针</tag>
      </tags>
  </entry>
</search>
